limit_req_zone $binary_remote_addr
                    zone=limitzone1:10m rate=2r/s;

limit_req_status 429;

proxy_cache_path /var/cache/nginx
                    keys_zone=NginxCache:20m
                    inactive=60m
                    levels=1:2
                    max_size=10g;

upstream demo {
    server django:8000;
}

server {
    listen 80;

    # allow <ip-address>
    # deny all;

    proxy_cache NginxCache;

    location / {
        proxy_pass http://demo;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;

        # limit_req zone=limitzone1 burst=5 nodelay;
        limit_req zone=limitzone1 burst=12 delay=7;

        proxy_cache_methods GET;
        proxy_cache_valid 200 10m;
        proxy_cache_valid 404 4m;
        proxy_cache_min_uses 5;
        proxy_cache_bypass $cookie_sessionid;

        add_header X-Proxy-Cache $upstream_cache_status;
    }

    location /admin/login {
        proxy_pass http://demo;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;

        proxy_cache_methods GET;
        proxy_cache_valid 200 10m;
        proxy_cache_valid 404 4m;
        proxy_cache_bypass $cookie_sessionid;
        add_header X-Proxy-Cache $upstream_cache_status;

        limit_req zone=limitzone1;
    }

    location /ping {
        proxy_pass http://demo;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;

        proxy_cache_bypass $http_cache_bypass;
        proxy_cache off;

        add_header X-Proxy-Cache $upstream_cache_status;
    }

    location /auth-secure {
        proxy_pass http://demo;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;

        auth_basic "Restricted to staffs only";
        auth_basic_user_file /etc/pwd/.htpasswd;
    }

    location /static/ {
        alias /home/nginx/django/staticfiles/;
    }

    location /file {
        root /home/nginx/secure;
    
        secure_link $arg_md5,$arg_expires;
        secure_link_md5 "testsecurelinkprefix$uri$secure_link_expires";

        # if user doesn't use the secure link secret in the url
        # or uses the wrong one, nginx defaults link to empty string
        if ($secure_link = "") {
            return 403;
        }
        if ($secure_link = "0") {
            return 410;
        }

        # rewrite ^ /secure/$secure_link;
    }

    # location /secure {
    #     internal;
    #     root /home/nginx;
    # }
}
